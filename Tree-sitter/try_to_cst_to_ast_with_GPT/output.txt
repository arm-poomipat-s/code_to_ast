Concrete Syntax Tree for Test Case 1:
module: def add(x, y):
    return x + y

  function_definition: def add(x, y):
    return x + y
    identifier: add
    parameters: (x, y)
      identifier: x
      identifier: y
    block: return x + y
      return_statement: return x + y
        binary_operator: x + y
          identifier: x
          identifier: y

Abstract Syntax Tree for Test Case 1:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "name": "add",
      "params": {
        "type": "Parameters",
        "params": [
          {
            "type": "Identifier",
            "name": "x"
          },
          {
            "type": "Identifier",
            "name": "y"
          }
        ]
      },
      "body": [
        {
          "type": "ReturnStatement",
          "argument": null
        }
      ]
    }
  ]
}
----------------------------------------
Concrete Syntax Tree for Test Case 2:
module: def check_positive(x):
    if x > 0:
        return True
    else:
        return False

  function_definition: def check_positive(x):
    if x > 0:
        return True
    else:
        return False
    identifier: check_positive
    parameters: (x)
      identifier: x
    block: if x > 0:
        return True
    else:
        return False
      if_statement: if x > 0:
        return True
    else:
        return False
        comparison_operator: x > 0
          identifier: x
          integer: 0
        block: return True
          return_statement: return True
            true: True
        else_clause: else:
        return False
          block: return False
            return_statement: return False
              false: False

Abstract Syntax Tree for Test Case 2:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "name": "check_positive",
      "params": {
        "type": "Parameters",
        "params": [
          {
            "type": "Identifier",
            "name": "x"
          }
        ]
      },
      "body": [
        {
          "type": "IfStatement",
          "test": {
            "type": "BinaryExpression",
            "operator": ">",
            "left": {
              "type": "Identifier",
              "name": "x"
            },
            "right": {
              "type": "IntegerLiteral",
              "value": 0
            }
          },
          "consequent": [
            {
              "type": "ReturnStatement",
              "argument": null
            }
          ],
          "alternate": null
        }
      ]
    }
  ]
}
----------------------------------------
Concrete Syntax Tree for Test Case 3:
module: class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

  class_definition: class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")
    identifier: Person
    block: def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")
      function_definition: def __init__(self, name, age):
        self.name = name
        self.age = age
        identifier: __init__
        parameters: (self, name, age)
          identifier: self
          identifier: name
          identifier: age
        block: self.name = name
        self.age = age
          expression_statement: self.name = name
            assignment: self.name = name
              attribute: self.name
                identifier: self
                identifier: name
              identifier: name
          expression_statement: self.age = age
            assignment: self.age = age
              attribute: self.age
                identifier: self
                identifier: age
              identifier: age
      function_definition: def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")
        identifier: greet
        parameters: (self)
          identifier: self
        block: print(f"Hello, my name is {self.name} and I am {self.age} years old.")
          expression_statement: print(f"Hello, my name is {self.name} and I am {self.age} years old.")
            call: print(f"Hello, my name is {self.name} and I am {self.age} years old.")
              identifier: print
              argument_list: (f"Hello, my name is {self.name} and I am {self.age} years old.")
                string: f"Hello, my name is {self.name} and I am {self.age} years old."
                  string_start: f"
                  string_content: Hello, my name is 
                  interpolation: {self.name}
                    attribute: self.name
                      identifier: self
                      identifier: name
                  string_content:  and I am 
                  interpolation: {self.age}
                    attribute: self.age
                      identifier: self
                      identifier: age
                  string_content:  years old.
                  string_end: "

Abstract Syntax Tree for Test Case 3:
{
  "type": "Program",
  "body": [
    {
      "type": "ClassDeclaration",
      "name": "Person",
      "body": [
        {
          "type": "FunctionDeclaration",
          "name": "__init__",
          "params": {
            "type": "Parameters",
            "params": [
              {
                "type": "Identifier",
                "name": "self"
              },
              {
                "type": "Identifier",
                "name": "name"
              },
              {
                "type": "Identifier",
                "name": "age"
              }
            ]
          },
          "body": [
            {
              "type": "Assignment",
              "left": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "self"
                },
                "property": {
                  "type": "Identifier",
                  "name": "name"
                }
              },
              "right": {
                "type": "Identifier",
                "name": "name"
              }
            },
            {
              "type": "Assignment",
              "left": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "self"
                },
                "property": {
                  "type": "Identifier",
                  "name": "age"
                }
              },
              "right": {
                "type": "Identifier",
                "name": "age"
              }
            }
          ]
        },
        {
          "type": "FunctionDeclaration",
          "name": "greet",
          "params": {
            "type": "Parameters",
            "params": [
              {
                "type": "Identifier",
                "name": "self"
              }
            ]
          },
          "body": [
            {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "print"
              },
              "arguments": [
                [
                  {
                    "type": "StringLiteral",
                    "value": "f\"Hello, my name is {self.name} and I am {self.age} years old.\""
                  }
                ]
              ]
            }
          ]
        }
      ],
      "superClass": null
    }
  ]
}
----------------------------------------
Concrete Syntax Tree for Test Case 4:
module: def count_to_n(n):
    for i in range(1, n+1):
        print(i)

  function_definition: def count_to_n(n):
    for i in range(1, n+1):
        print(i)
    identifier: count_to_n
    parameters: (n)
      identifier: n
    block: for i in range(1, n+1):
        print(i)
      for_statement: for i in range(1, n+1):
        print(i)
        identifier: i
        call: range(1, n+1)
          identifier: range
          argument_list: (1, n+1)
            integer: 1
            binary_operator: n+1
              identifier: n
              integer: 1
        block: print(i)
          expression_statement: print(i)
            call: print(i)
              identifier: print
              argument_list: (i)
                identifier: i

Abstract Syntax Tree for Test Case 4:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "name": "count_to_n",
      "params": {
        "type": "Parameters",
        "params": [
          {
            "type": "Identifier",
            "name": "n"
          }
        ]
      },
      "body": [
        {
          "type": "ForStatement",
          "left": {
            "type": "Identifier",
            "name": "i"
          },
          "right": {
            "type": "CallExpression",
            "callee": {
              "type": "Identifier",
              "name": "range"
            },
            "arguments": [
              [
                {
                  "type": "IntegerLiteral",
                  "value": 1
                },
                null
              ]
            ]
          },
          "body": [
            {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "print"
              },
              "arguments": [
                [
                  {
                    "type": "Identifier",
                    "name": "i"
                  }
                ]
              ]
            }
          ]
        }
      ]
    }
  ]
}
----------------------------------------
Concrete Syntax Tree for Test Case 5:
module: def outer_function(x):
    def inner_function(y):
        return x + y
    return inner_function

  function_definition: def outer_function(x):
    def inner_function(y):
        return x + y
    return inner_function
    identifier: outer_function
    parameters: (x)
      identifier: x
    block: def inner_function(y):
        return x + y
    return inner_function
      function_definition: def inner_function(y):
        return x + y
        identifier: inner_function
        parameters: (y)
          identifier: y
        block: return x + y
          return_statement: return x + y
            binary_operator: x + y
              identifier: x
              identifier: y
      return_statement: return inner_function
        identifier: inner_function

Abstract Syntax Tree for Test Case 5:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "name": "outer_function",
      "params": {
        "type": "Parameters",
        "params": [
          {
            "type": "Identifier",
            "name": "x"
          }
        ]
      },
      "body": [
        {
          "type": "FunctionDeclaration",
          "name": "inner_function",
          "params": {
            "type": "Parameters",
            "params": [
              {
                "type": "Identifier",
                "name": "y"
              }
            ]
          },
          "body": [
            {
              "type": "ReturnStatement",
              "argument": null
            }
          ]
        },
        {
          "type": "ReturnStatement",
          "argument": {
            "type": "Identifier",
            "name": "inner_function"
          }
        }
      ]
    }
  ]
}
----------------------------------------
